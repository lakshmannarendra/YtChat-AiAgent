import { AxiosResponse } from 'axios';

export type Status<T = object> = StatusError | StatusOk<T>;
export type StatusOk<T = object> = {
    status: "ok";
} & T;
export type StatusError = {
    status: "error";
    error: {
        code: number;
        message: string;
    };
};
export interface ProjectEnv {
    id: string;
    name: string;
}
export interface Project {
    id: string;
    name: string;
    region: string;
    createdAt: number;
    updatedAt: number;
    cloudProvider: string;
    projectEnvs: ProjectEnv[];
    role: string;
    stack: string[];
}
export declare const getProjectsForUser: (index: number, limit: number) => Promise<Project[]>;
export declare const getProjectById: (projectId: string) => Promise<AxiosResponse<any, any>>;
export declare const deleteProjectById: (projectId: string) => Promise<AxiosResponse<any, any>>;
export declare const deleteStage: (projectId: string, stage: string) => Promise<AxiosResponse<any, any>>;
export declare const getClassById: (classId: string) => Promise<AxiosResponse<any, any>>;
export declare const getAllLogs: (projectId: any, envId: any, startTime: any, endTime: any, searchTerm?: string, logLevel?: string, httpMethod?: string, httpStatus?: string, url?: string, operationId?: string, backendIds?: string, nextToken?: any, limit?: any) => Promise<AxiosResponse<any, any>>;
export declare const getLogs: (classId: string, startTime: any, endTime: any, searchTerm?: string, nextToken?: any, limit?: any) => Promise<AxiosResponse<any, any>>;
export declare const getFunctionLogs: (classId: string, startTime: any, endTime: any, searchTerm: string, logLevel?: string, httpMethod?: string, httpStatus?: string, url?: string, operationId?: string, instanceId?: string, backendIds?: string, nextToken?: any, limit?: any) => Promise<AxiosResponse<any, any>>;
export declare const changeClassStatus: (classId: string, status: any, isFunction: any) => Promise<AxiosResponse<any, any>>;
export declare const getAccessTokens: () => Promise<AxiosResponse<any, any>>;
export declare const deleteAccessToken: (tokenId: string) => Promise<AxiosResponse<any, any>>;
export declare const createAccessToken: (name: string) => Promise<AxiosResponse<any, any>>;
export declare const getCheckoutLink: (subscriptionPlan: string) => Promise<AxiosResponse<any, any>>;
export declare const getStripeCustomerPortalLink: () => Promise<AxiosResponse<any, any>>;
export declare const cancelStripeSubscription: () => Promise<AxiosResponse<any, any>>;
export declare const getUserInformation: () => Promise<AxiosResponse<any, any>>;
export declare const getSubscriptionPlans: () => Promise<AxiosResponse<any, any>>;
export declare const getFrontendByProjectId: (projectId: string, envId: string) => Promise<AxiosResponse<any, any>>;
export declare const deleteFrontendByDomain: (domain: string) => Promise<AxiosResponse<any, any>>;
export declare const createUserDetails: (data: object) => Promise<AxiosResponse<any, any>>;
export declare const deleteFrontendByCustomDomain: (domain: string) => Promise<AxiosResponse<any, any>>;
export declare const requestCustomDomain: (genezioDomain: string, customDomain: string) => Promise<AxiosResponse<any, any>>;
export declare const restartFrontendDomainCron: (domain: string) => Promise<AxiosResponse<any, any>>;
export declare const deleteSubdomain: (subdomain: string) => Promise<AxiosResponse<any, any>>;
export interface EnvVariable {
    id: string;
    name: string;
    type: string;
    lastAcessedAt: string;
}
export interface EnvVariableGetResponse {
    status: string;
    environmentVariables: EnvVariable[];
}
export declare const getProjectEnv: (projectId: string, envId: string) => Promise<AxiosResponse<EnvVariableGetResponse, any>>;
export declare const createProjectEnv: (projectId: string, envId: string, environmentVariables: any) => Promise<AxiosResponse<{
    status: string;
}, any>>;
export declare const deleteProjectEnv: (projectId: string, envId: string, environmentVariableId: any) => Promise<AxiosResponse<any, any>>;
export declare const getAllIntegrations: () => Promise<AxiosResponse<any, any>>;
export declare const getProjectIntegrations: (projectId: string, envId: string) => Promise<AxiosResponse<any, any>>;
export declare const deactivateIntegration: (projectId: string, envId: string, integrationName: string) => Promise<void>;
export declare const connectExternalOAuth: (DatabaseOauthConnectionUrl: string) => Promise<void>;
export declare const createUpstashDatabase: (databaseInfo: any) => Promise<AxiosResponse<any, any>>;
export declare const getUpstashDatabases: () => Promise<AxiosResponse<any, any>>;
export declare const addProjectIntegration: (projectId: string, envId: string, payload: any) => Promise<AxiosResponse<any, any>>;
export declare const getUserRepositories: (filter?: boolean) => Promise<AxiosResponse<any, any>>;
export declare const deployNewProjectGithub: (name: string, region: string, repositoryUrl: string, privateRepo: boolean, basePath: string, envs: any, repoName: string) => Promise<AxiosResponse<any, any>>;
export declare const getRepositoryDetails: (repoId: number, basePath: string) => Promise<AxiosResponse<any, any>>;
export declare const getRepositoryDetailsByUrl: (repoUrl: string, basePath: string) => Promise<AxiosResponse<any, any>>;
export declare const getRepositoryTree: (repoId: number) => Promise<AxiosResponse<any, any>>;
export declare const linkRepository: (framework: string, repositoryId: number, basePath: string, projectConfiguration: any, envs: any) => Promise<AxiosResponse<any, any>>;
export declare const getLinkedRepositories: (projectId: any) => Promise<AxiosResponse<any, any>>;
export declare const deleteLinkedRepository: (repoId: string) => Promise<AxiosResponse<any, any>>;
export declare const getJobId: (repoId: string) => Promise<AxiosResponse<any, any>>;
export declare const connectUserToGithub: (codeId?: string, installationId?: string) => Promise<AxiosResponse<any, any>>;
export declare const getTemplates: () => Promise<AxiosResponse<any, any>>;
export declare const createProject: (projectDetails: any) => Promise<AxiosResponse<any, any>>;
export declare const checkIntegrationUser: (integrationName: string) => Promise<AxiosResponse<any, any>>;
export declare const disconnectIntegration: (integrationName: string) => Promise<AxiosResponse<any, any>>;
export declare const createNeonProject: (projectData: any) => Promise<AxiosResponse<any, any>>;
export declare const getNeonProjects: () => Promise<AxiosResponse<any, any>>;
export declare const getNeonProjectDetails: (projectId: string) => Promise<AxiosResponse<any, any>>;
export declare const oauthRedirect: (integrationName: string, params: string) => Promise<any>;
export declare const getIntegrationEnvironmentVariablesList: (projectId: string, envId: string, integrationName: string) => Promise<AxiosResponse<any, any>>;
export declare const getProjectDetailsByName: (projectName: string, region: string) => Promise<AxiosResponse<any, any>>;
export declare const getProjectSubdomains: (projectId: string, envId: string) => Promise<AxiosResponse<any, any>>;
export declare const getDeployStatus: (owner: string, repo: string) => Promise<AxiosResponse<any, any>>;
export declare const getCollaborationRoles: () => Promise<AxiosResponse<any, any>>;
export declare const getCollaborators: (projectId: string) => Promise<AxiosResponse<any, any>>;
export declare const addCollaborators: (projectId: string, collaborators: any) => Promise<AxiosResponse<any, any>>;
export declare const removeCollaborator: (requestId: string) => Promise<AxiosResponse<any, any>>;
export declare const getInvitationDetails: (requestId: string) => Promise<AxiosResponse<any, any>>;
export declare const acceptCollaborationInvitation: (requestId: string, payload: boolean) => Promise<AxiosResponse<any, any>>;
export declare const getCurrentCollaboratorDetails: (projectId: string) => Promise<AxiosResponse<any, any>>;
export declare const updateCollaboratorRole: (reuqestId: string, roleId: string) => Promise<AxiosResponse<any, any>>;
export declare const getAuthProviders: (envId: string) => Promise<AxiosResponse<any, any>>;
export declare const enableAuthProvider: (envId: string, data: any) => Promise<AxiosResponse<any, any>>;
export declare const getAuth: (envId: string) => Promise<AxiosResponse<any, any>>;
export declare const activateAuth: (envId: string, data: any) => Promise<AxiosResponse<any, any>>;
export declare const updateEmailTemplates: (envId: string, data: any) => Promise<AxiosResponse<any, any>>;
export declare const getAuthEmailTemplate: (envId: string) => Promise<AxiosResponse<any, any>>;
export interface Database {
    id: string;
    name: string;
    region: string;
    type: "postgres-neon" | "mongo-atlas";
}
export declare const getAllDatabases: () => Promise<Database[]>;
export declare const getDatabaseConnectionURL: (databaseId: string) => Promise<AxiosResponse<any, any>>;
export declare const deleteDatabase: (databaseId: string) => Promise<AxiosResponse<any, any>>;
export declare const createDatabase: (databaseInfo: {
    name: string;
    type: string;
    region: string;
}) => Promise<void>;
export declare const resetDatabasePassword: (databaseId: string) => Promise<AxiosResponse<any, any>>;
export declare const getLinkedDatabases: (projectId: string, envId: string) => Promise<AxiosResponse<any, any>>;
export declare const linkDatabaseToProject: (projectId: string, envId: string, databaseId: string) => Promise<AxiosResponse<any, any>>;
export declare const unlinkDatabaseFromProject: (projectId: string, envId: string, databaseId: string) => Promise<AxiosResponse<any, any>>;
export declare const getPresignedURLForProjectCode: (projectName: string, region: string, stage: string) => Promise<any>;
export declare const getPresignedURLForProjectCodeUpload: (projectName: string, region: string, stage: string) => Promise<AxiosResponse<any, any>>;
export declare const getAllDeployments: (envId: string) => Promise<AxiosResponse<any, any>>;
export declare const getDeploymentDetails: (deploymentId: string) => Promise<AxiosResponse<any, any>>;
export declare const deployUsingBuildMachine: (projectEnvID: string) => Promise<AxiosResponse<any, any>>;
export declare const getAllMetrics: (startTime: any, endTime: any, projectId: string) => Promise<AxiosResponse<any, any>>;
export declare const commitUsingBuildMachine: (projectEnvID: string, commitMessage: string) => Promise<AxiosResponse<any, any>>;
//# sourceMappingURL=ApiAxios.d.ts.map
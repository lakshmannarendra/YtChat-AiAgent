import { StylesConfig } from 'react-select';
import { Project } from './ApiAxios';
import { default as JSZip } from 'jszip';
import { DefaultTheme } from 'styled-components';
import { Option } from 'src/Components/Select';

export declare enum typeOption {
    Primitive = "Primitive",
    Object = "Object",
    Array = "Array"
}
export declare const primitiveTypes: readonly string[];
export type dropdownOption = {
    value: string;
    label?: string;
};
export declare const environmentOptions: dropdownOption[];
export declare const typeOptions: Option[];
export declare const requestTypeOptions: Option[];
export interface Param {
    name: string;
    type: string | dropdownOption;
    value?: any;
    isGnzContext?: boolean;
}
export interface Method {
    id?: string;
    cloudUrl?: string;
    requestType?: string;
    name: string;
    type: string;
    params: Param[];
}
export interface ClassType {
    name: string;
    id: string;
    cloudUrl: string;
    ast: {
        methods: Method[];
    };
}
export interface TabType {
    tab: string;
    className: string;
    method: Method;
    response: string;
    time: number;
    status: number;
}
export declare const isJsonString: (s: string) => boolean;
export declare function colourStyles(theme: DefaultTheme): StylesConfig<dropdownOption>;
export declare const serverlessFunctionsTypes: {
    name: string;
    type: string;
    path: string;
    typeLiteral: {
        type: string;
        properties: {
            name: string;
            optional: boolean;
            type: {
                type: string;
            };
        }[];
    };
}[];
export declare const headersValue: {
    "content-type": string;
    connection: string;
};
export declare const mapTypeToOptions: (type: string) => dropdownOption;
export declare const syncTabs: (storageTabs: TabType[], classes: ClassType[], project: any, activeTab: number) => void;
export declare function getUTMSignupSource(urlParams: URLSearchParams): string;
export declare function getGoogleClickId(urlParams: URLSearchParams): string;
export declare const capitalizeFirstLetter: (word: string) => string;
export declare function copyToClipboard(textToCopy: string, btn: string, buttonCopyState: string, setButtonCopyState: (value: string) => void): void;
export declare const defaultReservedEnvNames: string[];
export declare const DEFAULT_STAGE_NAME = "prod";
export declare const nonBinaryFileExtensions: string[];
export declare function getEmbedProject(projectName: string, region: string, stage: string): Promise<{
    files: {
        [key: string]: JSZip.JSZipObject;
    };
    filesContent: any;
    binaryFilesContent: any;
    isBase64EncodedContent: any;
} | null>;
export declare function uploadProjectFilesToS3(projectName: string, region: string, stage: string, files: any): Promise<unknown>;
export declare const pxToRem: (size: string) => string;
export declare const truncateString: (str: string) => string;
export declare const capitalizeWord: (str: string) => string;
export declare const validateEmail: (email: string) => boolean;
export declare const findDuplicateCollaborators: (projectCollaborators: any, collaborators: any) => any;
export declare const createOption: (label: string) => {
    label: string;
    value: string;
};
export declare const formatCollaboratorsValues: (collaborators: any, role: any) => {
    collaborators: {
        email: any;
        role: any;
    }[];
};
export declare function computeProjectUrl(project: Project, envId?: string): string;
export declare function handleSearch<T>(elements: T[], searchTerm: string, key?: (t: T) => string): T[];
//# sourceMappingURL=Utils.d.ts.map
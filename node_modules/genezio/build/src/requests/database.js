import sendRequest from "../utils/requests.js";
export async function createDatabase(request, projectId, envId, linkToStage = false) {
    const { name, type } = request;
    let { region } = request;
    if (type === "postgres-neon") {
        region = `aws-${region}`;
    }
    const data = JSON.stringify({
        name: name,
        region: region,
        type: type,
        clusterType: request.clusterType,
        clusterName: request.clusterName,
        clusterTier: request.clusterTier,
    });
    const databaseResponse = (await sendRequest("POST", "databases", data));
    if (linkToStage) {
        await linkDatabaseToEnvironment(projectId, envId, databaseResponse.databaseId);
    }
    return databaseResponse;
}
export async function linkDatabaseToEnvironment(projectId, envId, databaseId) {
    if (!projectId || !envId) {
        throw new Error("projectId and envId are required to link a database to an environment");
    }
    return (await sendRequest("POST", `projects/${projectId}/${envId}/databases/${databaseId}`, ""));
}
export async function getDatabaseByName(name) {
    const allDatabaseResponse = await sendRequest("GET", `databases`, "");
    const getDatabaseResponse = allDatabaseResponse.databases.find((database) => database.name === name);
    if (getDatabaseResponse) {
        getDatabaseResponse.connectionUrl = (await sendRequest("GET", `databases/${getDatabaseResponse.id}`, "")).connectionUrl;
    }
    return getDatabaseResponse;
}
export async function findLinkedDatabase(name, projectId, envId) {
    const response = (await sendRequest("GET", `projects/${projectId}/${envId}/databases`, ""));
    return response.databases.find((database) => database.name === name);
}
export async function listDatabases() {
    const response = (await sendRequest("GET", `databases`, ""));
    return response.databases;
}
export async function getConnectionUrl(databaseId) {
    const response = (await sendRequest("GET", `databases/${databaseId}`, ""));
    return response.connectionUrl;
}

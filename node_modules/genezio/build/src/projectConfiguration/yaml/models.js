import { detectPythonCommand } from "../../utils/detectPythonCommand.js";
export var Language;
(function (Language) {
    Language["js"] = "js";
    Language["ts"] = "ts";
    Language["swift"] = "swift";
    Language["python"] = "python";
    Language["pythonAsgi"] = "python-asgi";
    Language["dart"] = "dart";
    Language["kt"] = "kt";
    Language["go"] = "go";
    Language["container"] = "container";
})(Language || (Language = {}));
export var AuthenticationDatabaseType;
(function (AuthenticationDatabaseType) {
    AuthenticationDatabaseType["mongo"] = "mongodb";
    AuthenticationDatabaseType["postgres"] = "postgresql";
})(AuthenticationDatabaseType || (AuthenticationDatabaseType = {}));
export var DatabaseType;
(function (DatabaseType) {
    DatabaseType["neon"] = "postgres-neon";
    DatabaseType["mongo"] = "mongo-atlas";
})(DatabaseType || (DatabaseType = {}));
export var TriggerType;
(function (TriggerType) {
    TriggerType["jsonrpc"] = "jsonrpc";
    TriggerType["cron"] = "cron";
    TriggerType["http"] = "http";
})(TriggerType || (TriggerType = {}));
export var AuthenticationEmailTemplateType;
(function (AuthenticationEmailTemplateType) {
    AuthenticationEmailTemplateType["verification"] = "VERIFICATION";
    AuthenticationEmailTemplateType["passwordReset"] = "PASS_RESET";
})(AuthenticationEmailTemplateType || (AuthenticationEmailTemplateType = {}));
export var FunctionType;
(function (FunctionType) {
    FunctionType["aws"] = "aws";
    FunctionType["httpServer"] = "httpServer";
    FunctionType["persistent"] = "persistent";
})(FunctionType || (FunctionType = {}));
export var InstanceSize;
(function (InstanceSize) {
    InstanceSize["tiny"] = "tiny";
    InstanceSize["medium"] = "medium";
    InstanceSize["large"] = "large";
})(InstanceSize || (InstanceSize = {}));
export const entryFileFunctionMap = {
    js: "index.mjs",
    ts: "index.mjs",
    python: "index.py",
    go: "main.go",
};
export const startingCommandMap = {
    js: "node",
    ts: "node",
    python: await detectPythonCommand(),
    go: "go",
};
